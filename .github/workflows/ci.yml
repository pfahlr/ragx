name: ci
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Detect if native code changed (under ./cpp)
      - name: Detect native changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            native:
              - 'cpp/CMakeLists.txt'
              - 'cpp/**/*.cmake'
              - 'cpp/**/*.c'
              - 'cpp/**/*.cc'
              - 'cpp/**/*.cpp'
              - 'cpp/**/*.cxx'
              - 'cpp/**/*.h'
              - 'cpp/**/*.hpp'
              - 'cpp/**/*.hxx'

      # Python runtime with pip caching
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # Install Python deps (incl. pybind11 for cmake discovery) + dev tools
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pybind11 ruff mypy pytest coverage yamllint || true

      # Export pybind11_DIR so CMake can find it (portable)
      - name: Export pybind11_DIR
        run: |
          echo "pybind11_DIR=$(python -m pybind11 --cmakedir)" >> $GITHUB_ENV
          echo "Using pybind11_DIR=$pybind11_DIR"

      # Install ccache (small, fast) so compiler launcher works
      - name: Install ccache
        if: ${{ steps.changes.outputs.native == 'true' && hashFiles('cpp/CMakeLists.txt') != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache
          ccache --version

      # Detect compiler (for cache key stability)
      - name: Detect compiler
        if: ${{ steps.changes.outputs.native == 'true' }}
        run: |
          echo "CXX_VER=$(g++ --version | head -n1 | tr -s ' ' '_')" >> $GITHUB_ENV
          echo "CXX_VER=$CXX_VER"

      # Compute safe hashes for cmake + sources (no commas/spaces in key)
      - name: Compute hash keys
        if: ${{ steps.changes.outputs.native == 'true' }}
        run: |
          set -e
          cmake_list="$(find cpp -type f \( -name 'CMakeLists.txt' -o -name '*.cmake' \) | sort)"
          src_list="$(find cpp -type f \( -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' -o -name '*.h' -o -name '*.hpp' -o -name '*.hxx' \) | sort)"
          if [ -z "$cmake_list" ]; then
            echo "cmake_hash=none" >> $GITHUB_ENV
          else
            cmake_hash=$(xargs -r sha1sum < <(printf '%s\n' "$cmake_list") | sha1sum | cut -d' ' -f1)
            echo "cmake_hash=$cmake_hash" >> $GITHUB_ENV
          fi
          if [ -z "$src_list" ]; then
            echo "src_hash=none" >> $GITHUB_ENV
          else
            src_hash=$(xargs -r sha1sum < <(printf '%s\n' "$src_list") | sha1sum | cut -d' ' -f1)
            echo "src_hash=$src_hash" >> $GITHUB_ENV
          fi

      # Cache ccache dir directly (fast restore)
      - name: Cache ccache dir
        if: ${{ steps.changes.outputs.native == 'true' && hashFiles('cpp/CMakeLists.txt') != '' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ env.CXX_VER }}-${{ env.cmake_hash }}-${{ env.src_hash }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.CXX_VER }}-
            ccache-${{ runner.os }}-

      # Configure CMake (points to ./cpp as source dir)
      - name: Configure CMake
        if: ${{ steps.changes.outputs.native == 'true' && hashFiles('cpp/CMakeLists.txt') != '' }}
        env:
          pybind11_DIR: ${{ env.pybind11_DIR }}
        run: |
          mkdir -p ~/.cache/ccache
          ccache --max-size=200M || true
          cmake -S ./cpp -B build \
            -G Ninja \
            -Dpybind11_DIR="$pybind11_DIR" \
            -DPYBIND11_FINDPYTHON=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build (native)
        if: ${{ steps.changes.outputs.native == 'true' && hashFiles('cpp/CMakeLists.txt') != '' }}
        run: cmake --build build -- -j"$(nproc)"

      # Lint / type / tests (non-fatal like your original)
      - name: Ruff
        run: ruff check . || true

      - name: MyPy
        run: mypy . || true

      - name: PyTest
        run: pytest --maxfail=1 --disable-warnings || true
