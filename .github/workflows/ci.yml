name: ci
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Figure out if native (C/C++) changed â€” avoids needless ccache restore
      - name: Detect native changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            native:
              - '**/CMakeLists.txt'
              - '**/*.cmake'
              - '**/*.c'
              - '**/*.cc'
              - '**/*.cpp'
              - '**/*.cxx'
              - '**/*.h'
              - '**/*.hpp'
              - '**/*.hxx'

      # Python runtime with pip caching
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pybind11 ruff mypy pytest coverage yamllint || true

      - name: Export pybind11_DIR
        run: |
          echo "pybind11_DIR=$(python -m pybind11 --cmakedir)" >> $GITHUB_ENV
          echo "Using pybind11_DIR=$pybind11_DIR"

      # Compute hashes safely (no commas)
      - name: Compute hash keys
        id: hash
        run: |
          echo "cmake_hash=$(sha1sum $(find . -name 'CMakeLists.txt' -o -name '*.cmake' | sort) | sha1sum | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "src_hash=$(sha1sum $(find . -name '*.cpp' -o -name '*.cc' -o -name '*.c' -o -name '*.hpp' -o -name '*.h' | sort) | sha1sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Cache ccache dir
        if: steps.changes.outputs.native == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ env.CXX_VER }}-${{ env.cmake_hash }}-${{ env.src_hash }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.CXX_VER }}-
            ccache-${{ runner.os }}-
          compression-level: 0

      # Record the compiler version into env (better cache key)
      - name: Detect compiler
        if: steps.changes.outputs.native == 'true'
        run: |
          echo "CXX_VER=$(g++ --version | head -n1 | tr -s ' ' '_')" >> $GITHUB_ENV
          which ccache && ccache --version || true

      # Configure CMake only when native changed (avoids cache restore on pure-Python edits)
      - name: Configure CMake
        if: steps.changes.outputs.native == 'true' && hashFiles('**/CMakeLists.txt') != ''
        env:
          pybind11_DIR: ${{ env.pybind11_DIR }}
        run: |
          # keep ccache small; this controls on-disk size (~ download size)
          mkdir -p ~/.cache/ccache
          ccache --max-size=200M || true
          cmake -S ./cpp -B build \
            -G Ninja \
            -Dpybind11_DIR="$pybind11_DIR" \
            -DPYBIND11_FINDPYTHON=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build (native)
        if: steps.changes.outputs.native == 'true' && hashFiles('**/CMakeLists.txt') != ''
        run: cmake --build build -- -j"$(nproc)"

      # Lint / type / tests
      - name: Ruff
        run: ruff check . || true

      - name: MyPy
        run: mypy . || true

      - name: PyTest
        run: pytest --maxfail=1 --disable-warnings || true
