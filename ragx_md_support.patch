diff --git a/codex/specs/ragx_master_spec.yaml b/codex/specs/ragx_master_spec.yaml
index 1111111..2222222 100644
--- a/codex/specs/ragx_master_spec.yaml
+++ b/codex/specs/ragx_master_spec.yaml
@@ -84,6 +84,8 @@ arg_spec:
     - { flag: "--merge",             dest: merge,             type: path,   repeatable: true }
     - { flag: "--faiss-threads",     dest: faiss_threads,     type: int,    default: 0 }
     - { flag: "--to-gpu",            dest: to_gpu,            type: int }
+    # New: allow selecting accepted corpus formats (repeatable)
+    - { flag: "--accept-format",     dest: accept_format,     type: enum,   choices: [pdf,md], repeatable: true, default: [pdf,md], help: "Accepted source formats when scanning --corpus-dir." }
 
   retrieval:
     - { flag: "--search",            dest: search,            type: enum,   choices: [bing,tavily,none], default: none, help: "Web search provider used by retriever." }
@@ -255,11 +257,19 @@ components:
     phase: P0
     title: Vector DB Core (Interfaces + Orchestrator)
     description: Stable Python registry + protocols; C++ interface design; CLI wrapper; CPU-serialized index contract.
     responsibilities:
-      - Provide Backend/Handle protocols, registry, CLI; enforce CPU serialization contract; shard merge API.
+      - Provide Backend/Handle protocols, registry, CLI; enforce CPU serialization contract; shard merge API.
+      - Orchestrate ingestion from **PDF** and **Markdown** (.md) sources located under `--corpus-dir`, extracting text and metadata (including optional front-matter).
     interfaces:
       cli:
         command: "vectordb-builder"
         subcommands:
           - { name: "build", flags_ref: vectordb_builder }
           - { name: "merge", flags_ref: vectordb_builder }
@@ -271,6 +281,15 @@ components:
         registry: { module: "ragcore.registry", functions: [register, get, list_backends] }
     data_contracts:
       index_layout:
         index_bin: "index.bin"
         index_spec_json: "index_spec.json"
         docmap_json: "docmap.json"
         shards_dir: "shards/"
+      corpus_input:
+        description: "Files discovered under --corpus-dir; PDFs and Markdown are supported."
+        formats:
+          - pdf: "Extract text and document metadata when available."
+          - md:  "Extract Markdown content; if present, parse optional front-matter (YAML or key:value header) above a '---' delimiter."
 
@@ -382,13 +401,18 @@ components:
     title: Research Collector CLI
     description: Scrape → manifest.json → download scripts → match/enrich → corpus export (jsonl + pdfs).
     responsibilities:
-      - Build manifest, download PDFs, enrich metadata, export corpus for indexing.
+      - Build manifest, download PDFs/Markdown, enrich metadata, export corpus for indexing.
     interfaces:
       cli:
         command: "research-collector"
         subcommands:
           - { name: "scrape" }
           - { name: "emit-downloads" }
           - { name: "match-enrich" }
     data_contracts:
       manifest_json: "collector/manifest.schema.json"
       corpus_jsonl: "collector/corpus.schema.json"
+      markdown_front_matter:
+        description: "When Markdown has front-matter, prefer YAML; otherwise support simple key:value header blocks above a `---` delimiter."
+        precedence: "Front-matter keys override auto-extracted metadata fields."
     dependencies: [aria2c, jdownloader, pypdf_or_pymupdf]
     observability:
       logs: [download_success_rate, metadata_completion_rate]
       risks:
         - site_html_variability
@@ -476,6 +500,12 @@ open_decisions:
     question: How to handle tools marked deterministic:false?
     options: [bypass_cache_warn, block_in_ci, allow_with_tag]
     default: bypass_cache_warn
+  - id: markdown_front_matter_precedence
+    question: If both embedded metadata and front-matter exist, which wins?
+    options: [front_matter_overrides, prefer_embedded_metadata, merge_with_priority_front_matter]
+    default: front_matter_overrides
 
 # Test matrix (high-level)
 tests:
   unit:
@@ -493,6 +523,7 @@ tests:
     - retrieval_ndcg_fixture_improves
     - planner_outline_hitl_flow
     - agents_parallel_speedup_and_dedupe
     - vectordb_build_and_search_small_fixture
+    - vectordb_build_md_fixture
   ci:
     coverage_minimum: 85
diff --git a/codex/agents/TASKS/03_vectordb_md_ingest.yaml b/codex/agents/TASKS/03_vectordb_md_ingest.yaml
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/codex/agents/TASKS/03_vectordb_md_ingest.yaml
@@ -0,0 +1,56 @@
+version: 1
+id: 03_vectordb_md_ingest
+title: "VectorDB: Add Markdown ingestion with optional front-matter"
+component_ids: [vector_db_core]
+preconditions:
+  - "codex/specs/ragx_master_spec.yaml exists"
+  - "Makefile, tests harness present"
+actions:
+  - implement:
+      path: ragcore/ingest/md_parser.py
+      description: |
+        Add a Markdown parser that:
+          - Accepts .md files
+          - Extracts optional front-matter (YAML or 'key: value' header block) above a '---' delimiter
+          - Returns (text, metadata) with front-matter keys merged (front-matter overrides)
+  - implement:
+      path: ragcore/ingest/pdf_parser.py
+      description: "Ensure PDF parsing path remains unchanged; refactor to shared interface if needed."
+  - implement:
+      path: ragcore/ingest/scanner.py
+      description: |
+        Directory scanner honoring:
+          - --corpus-dir
+          - --accept-format (repeatable: pdf, md; default both)
+        Emits normalized records for builder (text + metadata + source path).
+  - wire_cli:
+      path: ragcore/cli.py
+      description: "Extend vectordb-builder 'build' to use scanner and accepted formats."
+  - tests:
+      unit:
+        - path: tests/unit/test_md_front_matter_parse.py
+          description: "TDD: front-matter precedence, YAML vs key:value header, content extraction."
+      e2e:
+        - path: tests/e2e/test_vectordb_build_md_fixture.py
+          description: |
+            Use fixtures under /eval/verification (added by user) if present.
+            Build a tiny index from a couple of .md docs; assert docmap contains expected ids/titles.
+  - docs:
+      - path: docs/ingestion.md
+        description: "Document Markdown support and front-matter rules with examples."
+acceptance:
+  - "CLI accepts --accept-format md and builds without errors"
+  - "Front-matter overrides embedded metadata when both present (per open_decisions default)"
+  - "Unit + e2e tests pass locally (ruff, mypy, pytest)"
diff --git a/tests/unit/test_spec_vectordb_formats.py b/tests/unit/test_spec_vectordb_formats.py
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/tests/unit/test_spec_vectordb_formats.py
@@ -0,0 +1,38 @@
+import os
+import yaml
+
+
+def test_vectordb_accept_format_flag_in_spec():
+    spec_path = "codex/specs/ragx_master_spec.yaml"
+    assert os.path.exists(spec_path), "Master spec missing"
+    with open(spec_path, "r") as f:
+        spec = yaml.safe_load(f)
+    vb = spec["arg_spec"]["vectordb_builder"]
+    flags = {entry["flag"]: entry for entry in vb}
+    assert "--accept-format" in flags, "Missing --accept-format in vectordb_builder"
+    entry = flags["--accept-format"]
+    assert entry.get("repeatable") is True
+    assert set(entry.get("choices", [])) == {"pdf", "md"}
+    assert sorted(entry.get("default", [])) == ["md", "pdf"]
+
+
+def test_spec_mentions_markdown_and_front_matter_contracts():
+    spec_path = "codex/specs/ragx_master_spec.yaml"
+    with open(spec_path, "r") as f:
+        spec = yaml.safe_load(f)
+    # vector_db_core must list corpus_input with pdf+md notes
+    comps = {c["id"]: c for c in spec["components"]}
+    assert "vector_db_core" in comps, "vector_db_core component missing"
+    vcore = comps["vector_db_core"]
+    dc = vcore.get("data_contracts", {})
+    assert "corpus_input" in dc, "vector_db_core.data_contracts.corpus_input missing"
+    # research_collector mentions markdown front matter precedence
+    assert "research_collector" in comps, "research_collector component missing"
+    rc = comps["research_collector"]
+    rcdc = rc.get("data_contracts", {})
+    assert (
+        "markdown_front_matter" in rcdc
+    ), "research_collector.data_contracts.markdown_front_matter missing"
