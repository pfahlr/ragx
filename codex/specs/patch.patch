@@
   vectordb_builder:
     - { flag: "--index-kind",        dest: index_kind,        type: enum,   choices: [flat,ivf_flat,ivf_pq,hnsw], default: ivf_flat }
     - { flag: "--metric",            dest: metric,            type: enum,   choices: [l2,ip], default: ip }
     - { flag: "--dim",               dest: dim,               type: int,    default: 384 }
     - { flag: "--nlist",             dest: nlist,             type: int,    default: 2048 }
     - { flag: "--nprobe",            dest: nprobe,            type: int,    default: 32 }
     - { flag: "--pq-m",              dest: pq_m,              type: int,    default: 16 }
     - { flag: "--pq-bits",           dest: pq_bits,           type: int,    default: 8 }
     - { flag: "--M",                 dest: hnsw_M,            type: int,    default: 32 }
     - { flag: "--ef-construction",   dest: hnsw_ef_construction, type: int, default: 200 }
     - { flag: "--ef-search",         dest: hnsw_ef_search,    type: int,    default: 64 }
     - { flag: "--train-vectors",     dest: train_vectors,     type: path }
     - { flag: "--add-vectors",       dest: add_vectors,       type: path }
     - { flag: "--out",               dest: out,               type: path }
     - { flag: "--merge",             dest: merge,             type: path,   repeatable: true }
     - { flag: "--faiss-threads",     dest: faiss_threads,     type: int,    default: 0 }
     - { flag: "--to-gpu",            dest: to_gpu,            type: int }
+    # New: allow selecting accepted corpus formats (repeatable)
+    - { flag: "--accept-format",     dest: accept_format,     type: enum,   choices: [pdf,md], repeatable: true, default: [pdf,md], help: "Accepted source formats when scanning --corpus-dir." }
 
@@
   - id: vector_db_core
     phase: P0
     title: Vector DB Core (Interfaces + Orchestrator)
     description: Stable Python registry + protocols; C++ interface design; CLI wrapper; CPU-serialized index contract.
     responsibilities:
-      - Provide Backend/Handle protocols, registry, CLI; enforce CPU serialization contract; shard merge API.
+      - Provide Backend/Handle protocols, registry, CLI; enforce CPU serialization contract; shard merge API.
+      - Orchestrate ingestion from **PDF** and **Markdown** (.md) sources located under `--corpus-dir`, extracting text and metadata (including optional front-matter).
     interfaces:
       cli:
         command: "vectordb-builder"
         subcommands:
           - { name: "build", flags_ref: vectordb_builder }
@@
     data_contracts:
       index_layout:
         index_bin: "index.bin"
         index_spec_json: "index_spec.json"
         docmap_json: "docmap.json"
         shards_dir: "shards/"
+      corpus_input:
+        description: "Files discovered under --corpus-dir; PDFs and Markdown are supported."
+        formats:
+          - pdf: "Extract text and document metadata when available."
+          - md:  "Extract Markdown content; if present, parse optional front-matter (YAML or key:value header)."
 
@@
   - id: research_collector
     phase: P1
     title: Research Collector CLI
     description: Scrape → manifest.json → download scripts → match/enrich → corpus export (jsonl + pdfs).
     responsibilities:
-      - Build manifest, download PDFs, enrich metadata, export corpus for indexing.
+      - Build manifest, download PDFs/Markdown, enrich metadata, export corpus for indexing.
     interfaces:
       cli:
         command: "research-collector"
         subcommands:
           - { name: "scrape" }
           - { name: "emit-downloads" }
           - { name: "match-enrich" }
     data_contracts:
-      manifest_json: "collector/manifest.schema.json"
-      corpus_jsonl: "collector/corpus.schema.json"
+      manifest_json: "collector/manifest.schema.json"
+      corpus_jsonl: "collector/corpus.schema.json"
+      markdown_front_matter:
+        description: "When Markdown has front-matter, prefer YAML; otherwise support simple key:value header blocks above a `---` delimiter."
+        precedence: "Front-matter keys override auto-extracted metadata fields."
     dependencies: [aria2c, jdownloader, pypdf_or_pymupdf]
     observability:
       logs: [download_success_rate, metadata_completion_rate]
     risks:
       - site_html_variability
@@
 # Open decisions to resolve later (keep adding)
 open_decisions:
@@
   - id: nondeterministic_tools
     question: How to handle tools marked deterministic:false?
     options: [bypass_cache_warn, block_in_ci, allow_with_tag]
     default: bypass_cache_warn
+  - id: markdown_front_matter_precedence
+    question: If both embedded metadata and front-matter exist, which wins?
+    options: [front_matter_overrides, prefer_embedded_metadata, merge_with_priority_front_matter]
+    default: front_matter_overrides
 
 # Test matrix (high-level)
 tests:
   unit:
@@
     - publisher_bibliography_contains_all_citations
   e2e:
     - mcp_http_and_stdio_conformance
     - rest_parity_endpoints
     - retrieval_ndcg_fixture_improves
     - planner_outline_hitl_flow
     - agents_parallel_speedup_and_dedupe
     - vectordb_build_and_search_small_fixture
+    - vectordb_build_md_fixture
   ci:
     coverage_minimum: 85
